// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	FeeRule       *feeRule
	Gun           *gun
	Parameter     *parameter
	Pile          *pile
	RepairRequest *repairRequest
	Repairman     *repairman
	Station       *station
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	FeeRule = &Q.FeeRule
	Gun = &Q.Gun
	Parameter = &Q.Parameter
	Pile = &Q.Pile
	RepairRequest = &Q.RepairRequest
	Repairman = &Q.Repairman
	Station = &Q.Station
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		FeeRule:       newFeeRule(db, opts...),
		Gun:           newGun(db, opts...),
		Parameter:     newParameter(db, opts...),
		Pile:          newPile(db, opts...),
		RepairRequest: newRepairRequest(db, opts...),
		Repairman:     newRepairman(db, opts...),
		Station:       newStation(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	FeeRule       feeRule
	Gun           gun
	Parameter     parameter
	Pile          pile
	RepairRequest repairRequest
	Repairman     repairman
	Station       station
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		FeeRule:       q.FeeRule.clone(db),
		Gun:           q.Gun.clone(db),
		Parameter:     q.Parameter.clone(db),
		Pile:          q.Pile.clone(db),
		RepairRequest: q.RepairRequest.clone(db),
		Repairman:     q.Repairman.clone(db),
		Station:       q.Station.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		FeeRule:       q.FeeRule.replaceDB(db),
		Gun:           q.Gun.replaceDB(db),
		Parameter:     q.Parameter.replaceDB(db),
		Pile:          q.Pile.replaceDB(db),
		RepairRequest: q.RepairRequest.replaceDB(db),
		Repairman:     q.Repairman.replaceDB(db),
		Station:       q.Station.replaceDB(db),
	}
}

type queryCtx struct {
	FeeRule       IFeeRuleDo
	Gun           IGunDo
	Parameter     IParameterDo
	Pile          IPileDo
	RepairRequest IRepairRequestDo
	Repairman     IRepairmanDo
	Station       IStationDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		FeeRule:       q.FeeRule.WithContext(ctx),
		Gun:           q.Gun.WithContext(ctx),
		Parameter:     q.Parameter.WithContext(ctx),
		Pile:          q.Pile.WithContext(ctx),
		RepairRequest: q.RepairRequest.WithContext(ctx),
		Repairman:     q.Repairman.WithContext(ctx),
		Station:       q.Station.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
