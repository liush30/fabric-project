// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ev_charging_system/model"
)

func newFeeRule(db *gorm.DB, opts ...gen.DOOption) feeRule {
	_feeRule := feeRule{}

	_feeRule.feeRuleDo.UseDB(db, opts...)
	_feeRule.feeRuleDo.UseModel(&model.FeeRule{})

	tableName := _feeRule.feeRuleDo.TableName()
	_feeRule.ALL = field.NewAsterisk(tableName)
	_feeRule.RuleID = field.NewString(tableName, "rule_id")
	_feeRule.StationID = field.NewString(tableName, "station_id")
	_feeRule.RuleName = field.NewString(tableName, "rule_name")
	_feeRule.ChargingType = field.NewString(tableName, "charging_type")
	_feeRule.UnitPrice = field.NewString(tableName, "unit_price")
	_feeRule.PeakRate = field.NewFloat64(tableName, "peak_rate")
	_feeRule.OffPeakRate = field.NewFloat64(tableName, "off_peak_rate")
	_feeRule.MinCharge = field.NewFloat64(tableName, "min_charge")
	_feeRule.MaxCharge = field.NewFloat64(tableName, "max_charge")
	_feeRule.StartTime = field.NewString(tableName, "start_time")
	_feeRule.EndTime = field.NewString(tableName, "end_time")

	_feeRule.fillFieldMap()

	return _feeRule
}

type feeRule struct {
	feeRuleDo feeRuleDo

	ALL          field.Asterisk
	RuleID       field.String
	StationID    field.String
	RuleName     field.String
	ChargingType field.String
	UnitPrice    field.String
	PeakRate     field.Float64
	OffPeakRate  field.Float64
	MinCharge    field.Float64
	MaxCharge    field.Float64
	StartTime    field.String
	EndTime      field.String

	fieldMap map[string]field.Expr
}

func (f feeRule) Table(newTableName string) *feeRule {
	f.feeRuleDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f feeRule) As(alias string) *feeRule {
	f.feeRuleDo.DO = *(f.feeRuleDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *feeRule) updateTableName(table string) *feeRule {
	f.ALL = field.NewAsterisk(table)
	f.RuleID = field.NewString(table, "rule_id")
	f.StationID = field.NewString(table, "station_id")
	f.RuleName = field.NewString(table, "rule_name")
	f.ChargingType = field.NewString(table, "charging_type")
	f.UnitPrice = field.NewString(table, "unit_price")
	f.PeakRate = field.NewFloat64(table, "peak_rate")
	f.OffPeakRate = field.NewFloat64(table, "off_peak_rate")
	f.MinCharge = field.NewFloat64(table, "min_charge")
	f.MaxCharge = field.NewFloat64(table, "max_charge")
	f.StartTime = field.NewString(table, "start_time")
	f.EndTime = field.NewString(table, "end_time")

	f.fillFieldMap()

	return f
}

func (f *feeRule) WithContext(ctx context.Context) IFeeRuleDo { return f.feeRuleDo.WithContext(ctx) }

func (f feeRule) TableName() string { return f.feeRuleDo.TableName() }

func (f feeRule) Alias() string { return f.feeRuleDo.Alias() }

func (f feeRule) Columns(cols ...field.Expr) gen.Columns { return f.feeRuleDo.Columns(cols...) }

func (f *feeRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *feeRule) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["rule_id"] = f.RuleID
	f.fieldMap["station_id"] = f.StationID
	f.fieldMap["rule_name"] = f.RuleName
	f.fieldMap["charging_type"] = f.ChargingType
	f.fieldMap["unit_price"] = f.UnitPrice
	f.fieldMap["peak_rate"] = f.PeakRate
	f.fieldMap["off_peak_rate"] = f.OffPeakRate
	f.fieldMap["min_charge"] = f.MinCharge
	f.fieldMap["max_charge"] = f.MaxCharge
	f.fieldMap["start_time"] = f.StartTime
	f.fieldMap["end_time"] = f.EndTime
}

func (f feeRule) clone(db *gorm.DB) feeRule {
	f.feeRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f feeRule) replaceDB(db *gorm.DB) feeRule {
	f.feeRuleDo.ReplaceDB(db)
	return f
}

type feeRuleDo struct{ gen.DO }

type IFeeRuleDo interface {
	gen.SubQuery
	Debug() IFeeRuleDo
	WithContext(ctx context.Context) IFeeRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFeeRuleDo
	WriteDB() IFeeRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFeeRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFeeRuleDo
	Not(conds ...gen.Condition) IFeeRuleDo
	Or(conds ...gen.Condition) IFeeRuleDo
	Select(conds ...field.Expr) IFeeRuleDo
	Where(conds ...gen.Condition) IFeeRuleDo
	Order(conds ...field.Expr) IFeeRuleDo
	Distinct(cols ...field.Expr) IFeeRuleDo
	Omit(cols ...field.Expr) IFeeRuleDo
	Join(table schema.Tabler, on ...field.Expr) IFeeRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFeeRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFeeRuleDo
	Group(cols ...field.Expr) IFeeRuleDo
	Having(conds ...gen.Condition) IFeeRuleDo
	Limit(limit int) IFeeRuleDo
	Offset(offset int) IFeeRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFeeRuleDo
	Unscoped() IFeeRuleDo
	Create(values ...*model.FeeRule) error
	CreateInBatches(values []*model.FeeRule, batchSize int) error
	Save(values ...*model.FeeRule) error
	First() (*model.FeeRule, error)
	Take() (*model.FeeRule, error)
	Last() (*model.FeeRule, error)
	Find() ([]*model.FeeRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FeeRule, err error)
	FindInBatches(result *[]*model.FeeRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FeeRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFeeRuleDo
	Assign(attrs ...field.AssignExpr) IFeeRuleDo
	Joins(fields ...field.RelationField) IFeeRuleDo
	Preload(fields ...field.RelationField) IFeeRuleDo
	FirstOrInit() (*model.FeeRule, error)
	FirstOrCreate() (*model.FeeRule, error)
	FindByPage(offset int, limit int) (result []*model.FeeRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFeeRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f feeRuleDo) Debug() IFeeRuleDo {
	return f.withDO(f.DO.Debug())
}

func (f feeRuleDo) WithContext(ctx context.Context) IFeeRuleDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feeRuleDo) ReadDB() IFeeRuleDo {
	return f.Clauses(dbresolver.Read)
}

func (f feeRuleDo) WriteDB() IFeeRuleDo {
	return f.Clauses(dbresolver.Write)
}

func (f feeRuleDo) Session(config *gorm.Session) IFeeRuleDo {
	return f.withDO(f.DO.Session(config))
}

func (f feeRuleDo) Clauses(conds ...clause.Expression) IFeeRuleDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feeRuleDo) Returning(value interface{}, columns ...string) IFeeRuleDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f feeRuleDo) Not(conds ...gen.Condition) IFeeRuleDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feeRuleDo) Or(conds ...gen.Condition) IFeeRuleDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feeRuleDo) Select(conds ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feeRuleDo) Where(conds ...gen.Condition) IFeeRuleDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feeRuleDo) Order(conds ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feeRuleDo) Distinct(cols ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feeRuleDo) Omit(cols ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feeRuleDo) Join(table schema.Tabler, on ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feeRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feeRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feeRuleDo) Group(cols ...field.Expr) IFeeRuleDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feeRuleDo) Having(conds ...gen.Condition) IFeeRuleDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feeRuleDo) Limit(limit int) IFeeRuleDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feeRuleDo) Offset(offset int) IFeeRuleDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feeRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFeeRuleDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feeRuleDo) Unscoped() IFeeRuleDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feeRuleDo) Create(values ...*model.FeeRule) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feeRuleDo) CreateInBatches(values []*model.FeeRule, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feeRuleDo) Save(values ...*model.FeeRule) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feeRuleDo) First() (*model.FeeRule, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeeRule), nil
	}
}

func (f feeRuleDo) Take() (*model.FeeRule, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeeRule), nil
	}
}

func (f feeRuleDo) Last() (*model.FeeRule, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeeRule), nil
	}
}

func (f feeRuleDo) Find() ([]*model.FeeRule, error) {
	result, err := f.DO.Find()
	return result.([]*model.FeeRule), err
}

func (f feeRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FeeRule, err error) {
	buf := make([]*model.FeeRule, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feeRuleDo) FindInBatches(result *[]*model.FeeRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feeRuleDo) Attrs(attrs ...field.AssignExpr) IFeeRuleDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feeRuleDo) Assign(attrs ...field.AssignExpr) IFeeRuleDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feeRuleDo) Joins(fields ...field.RelationField) IFeeRuleDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f feeRuleDo) Preload(fields ...field.RelationField) IFeeRuleDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f feeRuleDo) FirstOrInit() (*model.FeeRule, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeeRule), nil
	}
}

func (f feeRuleDo) FirstOrCreate() (*model.FeeRule, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeeRule), nil
	}
}

func (f feeRuleDo) FindByPage(offset int, limit int) (result []*model.FeeRule, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f feeRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f feeRuleDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f feeRuleDo) Delete(models ...*model.FeeRule) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *feeRuleDo) withDO(do gen.Dao) *feeRuleDo {
	f.DO = *do.(*gen.DO)
	return f
}
