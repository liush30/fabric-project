// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ev_charging_system/model"
)

func newParameter(db *gorm.DB, opts ...gen.DOOption) parameter {
	_parameter := parameter{}

	_parameter.parameterDo.UseDB(db, opts...)
	_parameter.parameterDo.UseModel(&model.Parameter{})

	tableName := _parameter.parameterDo.TableName()
	_parameter.ALL = field.NewAsterisk(tableName)
	_parameter.ParamID = field.NewString(tableName, "param_id")
	_parameter.ParamKey = field.NewString(tableName, "param_key")
	_parameter.ParamValue = field.NewString(tableName, "param_value")

	_parameter.fillFieldMap()

	return _parameter
}

type parameter struct {
	parameterDo parameterDo

	ALL        field.Asterisk
	ParamID    field.String
	ParamKey   field.String
	ParamValue field.String

	fieldMap map[string]field.Expr
}

func (p parameter) Table(newTableName string) *parameter {
	p.parameterDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p parameter) As(alias string) *parameter {
	p.parameterDo.DO = *(p.parameterDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *parameter) updateTableName(table string) *parameter {
	p.ALL = field.NewAsterisk(table)
	p.ParamID = field.NewString(table, "param_id")
	p.ParamKey = field.NewString(table, "param_key")
	p.ParamValue = field.NewString(table, "param_value")

	p.fillFieldMap()

	return p
}

func (p *parameter) WithContext(ctx context.Context) IParameterDo {
	return p.parameterDo.WithContext(ctx)
}

func (p parameter) TableName() string { return p.parameterDo.TableName() }

func (p parameter) Alias() string { return p.parameterDo.Alias() }

func (p parameter) Columns(cols ...field.Expr) gen.Columns { return p.parameterDo.Columns(cols...) }

func (p *parameter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *parameter) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["param_id"] = p.ParamID
	p.fieldMap["param_key"] = p.ParamKey
	p.fieldMap["param_value"] = p.ParamValue
}

func (p parameter) clone(db *gorm.DB) parameter {
	p.parameterDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p parameter) replaceDB(db *gorm.DB) parameter {
	p.parameterDo.ReplaceDB(db)
	return p
}

type parameterDo struct{ gen.DO }

type IParameterDo interface {
	gen.SubQuery
	Debug() IParameterDo
	WithContext(ctx context.Context) IParameterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IParameterDo
	WriteDB() IParameterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IParameterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IParameterDo
	Not(conds ...gen.Condition) IParameterDo
	Or(conds ...gen.Condition) IParameterDo
	Select(conds ...field.Expr) IParameterDo
	Where(conds ...gen.Condition) IParameterDo
	Order(conds ...field.Expr) IParameterDo
	Distinct(cols ...field.Expr) IParameterDo
	Omit(cols ...field.Expr) IParameterDo
	Join(table schema.Tabler, on ...field.Expr) IParameterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IParameterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IParameterDo
	Group(cols ...field.Expr) IParameterDo
	Having(conds ...gen.Condition) IParameterDo
	Limit(limit int) IParameterDo
	Offset(offset int) IParameterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IParameterDo
	Unscoped() IParameterDo
	Create(values ...*model.Parameter) error
	CreateInBatches(values []*model.Parameter, batchSize int) error
	Save(values ...*model.Parameter) error
	First() (*model.Parameter, error)
	Take() (*model.Parameter, error)
	Last() (*model.Parameter, error)
	Find() ([]*model.Parameter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Parameter, err error)
	FindInBatches(result *[]*model.Parameter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Parameter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IParameterDo
	Assign(attrs ...field.AssignExpr) IParameterDo
	Joins(fields ...field.RelationField) IParameterDo
	Preload(fields ...field.RelationField) IParameterDo
	FirstOrInit() (*model.Parameter, error)
	FirstOrCreate() (*model.Parameter, error)
	FindByPage(offset int, limit int) (result []*model.Parameter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IParameterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p parameterDo) Debug() IParameterDo {
	return p.withDO(p.DO.Debug())
}

func (p parameterDo) WithContext(ctx context.Context) IParameterDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p parameterDo) ReadDB() IParameterDo {
	return p.Clauses(dbresolver.Read)
}

func (p parameterDo) WriteDB() IParameterDo {
	return p.Clauses(dbresolver.Write)
}

func (p parameterDo) Session(config *gorm.Session) IParameterDo {
	return p.withDO(p.DO.Session(config))
}

func (p parameterDo) Clauses(conds ...clause.Expression) IParameterDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p parameterDo) Returning(value interface{}, columns ...string) IParameterDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p parameterDo) Not(conds ...gen.Condition) IParameterDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p parameterDo) Or(conds ...gen.Condition) IParameterDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p parameterDo) Select(conds ...field.Expr) IParameterDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p parameterDo) Where(conds ...gen.Condition) IParameterDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p parameterDo) Order(conds ...field.Expr) IParameterDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p parameterDo) Distinct(cols ...field.Expr) IParameterDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p parameterDo) Omit(cols ...field.Expr) IParameterDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p parameterDo) Join(table schema.Tabler, on ...field.Expr) IParameterDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p parameterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IParameterDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p parameterDo) RightJoin(table schema.Tabler, on ...field.Expr) IParameterDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p parameterDo) Group(cols ...field.Expr) IParameterDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p parameterDo) Having(conds ...gen.Condition) IParameterDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p parameterDo) Limit(limit int) IParameterDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p parameterDo) Offset(offset int) IParameterDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p parameterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IParameterDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p parameterDo) Unscoped() IParameterDo {
	return p.withDO(p.DO.Unscoped())
}

func (p parameterDo) Create(values ...*model.Parameter) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p parameterDo) CreateInBatches(values []*model.Parameter, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p parameterDo) Save(values ...*model.Parameter) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p parameterDo) First() (*model.Parameter, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parameter), nil
	}
}

func (p parameterDo) Take() (*model.Parameter, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parameter), nil
	}
}

func (p parameterDo) Last() (*model.Parameter, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parameter), nil
	}
}

func (p parameterDo) Find() ([]*model.Parameter, error) {
	result, err := p.DO.Find()
	return result.([]*model.Parameter), err
}

func (p parameterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Parameter, err error) {
	buf := make([]*model.Parameter, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p parameterDo) FindInBatches(result *[]*model.Parameter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p parameterDo) Attrs(attrs ...field.AssignExpr) IParameterDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p parameterDo) Assign(attrs ...field.AssignExpr) IParameterDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p parameterDo) Joins(fields ...field.RelationField) IParameterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p parameterDo) Preload(fields ...field.RelationField) IParameterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p parameterDo) FirstOrInit() (*model.Parameter, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parameter), nil
	}
}

func (p parameterDo) FirstOrCreate() (*model.Parameter, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parameter), nil
	}
}

func (p parameterDo) FindByPage(offset int, limit int) (result []*model.Parameter, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p parameterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p parameterDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p parameterDo) Delete(models ...*model.Parameter) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *parameterDo) withDO(do gen.Dao) *parameterDo {
	p.DO = *do.(*gen.DO)
	return p
}
