// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ev_charging_system/model"
)

func newPile(db *gorm.DB, opts ...gen.DOOption) pile {
	_pile := pile{}

	_pile.pileDo.UseDB(db, opts...)
	_pile.pileDo.UseModel(&model.Pile{})

	tableName := _pile.pileDo.TableName()
	_pile.ALL = field.NewAsterisk(tableName)
	_pile.PileID = field.NewString(tableName, "pile_id")
	_pile.StationID = field.NewString(tableName, "station_id")
	_pile.PileCode = field.NewString(tableName, "pile_code")
	_pile.PileName = field.NewString(tableName, "pile_name")
	_pile.Description = field.NewString(tableName, "description")
	_pile.Location = field.NewString(tableName, "location")
	_pile.Status = field.NewInt8(tableName, "status")
	_pile.Type = field.NewInt8(tableName, "type")

	_pile.fillFieldMap()

	return _pile
}

type pile struct {
	pileDo pileDo

	ALL         field.Asterisk
	PileID      field.String
	StationID   field.String
	PileCode    field.String
	PileName    field.String
	Description field.String
	Location    field.String
	Status      field.Int8
	Type        field.Int8

	fieldMap map[string]field.Expr
}

func (p pile) Table(newTableName string) *pile {
	p.pileDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pile) As(alias string) *pile {
	p.pileDo.DO = *(p.pileDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pile) updateTableName(table string) *pile {
	p.ALL = field.NewAsterisk(table)
	p.PileID = field.NewString(table, "pile_id")
	p.StationID = field.NewString(table, "station_id")
	p.PileCode = field.NewString(table, "pile_code")
	p.PileName = field.NewString(table, "pile_name")
	p.Description = field.NewString(table, "description")
	p.Location = field.NewString(table, "location")
	p.Status = field.NewInt8(table, "status")
	p.Type = field.NewInt8(table, "type")

	p.fillFieldMap()

	return p
}

func (p *pile) WithContext(ctx context.Context) IPileDo { return p.pileDo.WithContext(ctx) }

func (p pile) TableName() string { return p.pileDo.TableName() }

func (p pile) Alias() string { return p.pileDo.Alias() }

func (p pile) Columns(cols ...field.Expr) gen.Columns { return p.pileDo.Columns(cols...) }

func (p *pile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pile) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["pile_id"] = p.PileID
	p.fieldMap["station_id"] = p.StationID
	p.fieldMap["pile_code"] = p.PileCode
	p.fieldMap["pile_name"] = p.PileName
	p.fieldMap["description"] = p.Description
	p.fieldMap["location"] = p.Location
	p.fieldMap["status"] = p.Status
	p.fieldMap["type"] = p.Type
}

func (p pile) clone(db *gorm.DB) pile {
	p.pileDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pile) replaceDB(db *gorm.DB) pile {
	p.pileDo.ReplaceDB(db)
	return p
}

type pileDo struct{ gen.DO }

type IPileDo interface {
	gen.SubQuery
	Debug() IPileDo
	WithContext(ctx context.Context) IPileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPileDo
	WriteDB() IPileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPileDo
	Not(conds ...gen.Condition) IPileDo
	Or(conds ...gen.Condition) IPileDo
	Select(conds ...field.Expr) IPileDo
	Where(conds ...gen.Condition) IPileDo
	Order(conds ...field.Expr) IPileDo
	Distinct(cols ...field.Expr) IPileDo
	Omit(cols ...field.Expr) IPileDo
	Join(table schema.Tabler, on ...field.Expr) IPileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPileDo
	Group(cols ...field.Expr) IPileDo
	Having(conds ...gen.Condition) IPileDo
	Limit(limit int) IPileDo
	Offset(offset int) IPileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPileDo
	Unscoped() IPileDo
	Create(values ...*model.Pile) error
	CreateInBatches(values []*model.Pile, batchSize int) error
	Save(values ...*model.Pile) error
	First() (*model.Pile, error)
	Take() (*model.Pile, error)
	Last() (*model.Pile, error)
	Find() ([]*model.Pile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pile, err error)
	FindInBatches(result *[]*model.Pile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Pile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPileDo
	Assign(attrs ...field.AssignExpr) IPileDo
	Joins(fields ...field.RelationField) IPileDo
	Preload(fields ...field.RelationField) IPileDo
	FirstOrInit() (*model.Pile, error)
	FirstOrCreate() (*model.Pile, error)
	FindByPage(offset int, limit int) (result []*model.Pile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pileDo) Debug() IPileDo {
	return p.withDO(p.DO.Debug())
}

func (p pileDo) WithContext(ctx context.Context) IPileDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pileDo) ReadDB() IPileDo {
	return p.Clauses(dbresolver.Read)
}

func (p pileDo) WriteDB() IPileDo {
	return p.Clauses(dbresolver.Write)
}

func (p pileDo) Session(config *gorm.Session) IPileDo {
	return p.withDO(p.DO.Session(config))
}

func (p pileDo) Clauses(conds ...clause.Expression) IPileDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pileDo) Returning(value interface{}, columns ...string) IPileDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pileDo) Not(conds ...gen.Condition) IPileDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pileDo) Or(conds ...gen.Condition) IPileDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pileDo) Select(conds ...field.Expr) IPileDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pileDo) Where(conds ...gen.Condition) IPileDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pileDo) Order(conds ...field.Expr) IPileDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pileDo) Distinct(cols ...field.Expr) IPileDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pileDo) Omit(cols ...field.Expr) IPileDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pileDo) Join(table schema.Tabler, on ...field.Expr) IPileDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPileDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pileDo) RightJoin(table schema.Tabler, on ...field.Expr) IPileDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pileDo) Group(cols ...field.Expr) IPileDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pileDo) Having(conds ...gen.Condition) IPileDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pileDo) Limit(limit int) IPileDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pileDo) Offset(offset int) IPileDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPileDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pileDo) Unscoped() IPileDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pileDo) Create(values ...*model.Pile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pileDo) CreateInBatches(values []*model.Pile, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pileDo) Save(values ...*model.Pile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pileDo) First() (*model.Pile, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pile), nil
	}
}

func (p pileDo) Take() (*model.Pile, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pile), nil
	}
}

func (p pileDo) Last() (*model.Pile, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pile), nil
	}
}

func (p pileDo) Find() ([]*model.Pile, error) {
	result, err := p.DO.Find()
	return result.([]*model.Pile), err
}

func (p pileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pile, err error) {
	buf := make([]*model.Pile, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pileDo) FindInBatches(result *[]*model.Pile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pileDo) Attrs(attrs ...field.AssignExpr) IPileDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pileDo) Assign(attrs ...field.AssignExpr) IPileDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pileDo) Joins(fields ...field.RelationField) IPileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pileDo) Preload(fields ...field.RelationField) IPileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pileDo) FirstOrInit() (*model.Pile, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pile), nil
	}
}

func (p pileDo) FirstOrCreate() (*model.Pile, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pile), nil
	}
}

func (p pileDo) FindByPage(offset int, limit int) (result []*model.Pile, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pileDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pileDo) Delete(models ...*model.Pile) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pileDo) withDO(do gen.Dao) *pileDo {
	p.DO = *do.(*gen.DO)
	return p
}
