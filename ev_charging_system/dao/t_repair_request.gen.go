// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ev_charging_system/model"
)

func newRepairRequest(db *gorm.DB, opts ...gen.DOOption) repairRequest {
	_repairRequest := repairRequest{}

	_repairRequest.repairRequestDo.UseDB(db, opts...)
	_repairRequest.repairRequestDo.UseModel(&model.RepairRequest{})

	tableName := _repairRequest.repairRequestDo.TableName()
	_repairRequest.ALL = field.NewAsterisk(tableName)
	_repairRequest.RepairID = field.NewString(tableName, "repair_id")
	_repairRequest.StationID = field.NewString(tableName, "station_id")
	_repairRequest.PileID = field.NewString(tableName, "pile_id")
	_repairRequest.RepairmanID = field.NewString(tableName, "repairman_id")
	_repairRequest.Description = field.NewString(tableName, "description")
	_repairRequest.Status = field.NewString(tableName, "status")
	_repairRequest.Reason = field.NewString(tableName, "reason")
	_repairRequest.Result = field.NewString(tableName, "result")
	_repairRequest.RequestTime = field.NewString(tableName, "request_time")
	_repairRequest.EndTime = field.NewString(tableName, "end_time")

	_repairRequest.fillFieldMap()

	return _repairRequest
}

type repairRequest struct {
	repairRequestDo repairRequestDo

	ALL         field.Asterisk
	RepairID    field.String
	StationID   field.String
	PileID      field.String
	RepairmanID field.String
	Description field.String
	Status      field.String
	Reason      field.String
	Result      field.String
	RequestTime field.String
	EndTime     field.String

	fieldMap map[string]field.Expr
}

func (r repairRequest) Table(newTableName string) *repairRequest {
	r.repairRequestDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r repairRequest) As(alias string) *repairRequest {
	r.repairRequestDo.DO = *(r.repairRequestDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *repairRequest) updateTableName(table string) *repairRequest {
	r.ALL = field.NewAsterisk(table)
	r.RepairID = field.NewString(table, "repair_id")
	r.StationID = field.NewString(table, "station_id")
	r.PileID = field.NewString(table, "pile_id")
	r.RepairmanID = field.NewString(table, "repairman_id")
	r.Description = field.NewString(table, "description")
	r.Status = field.NewString(table, "status")
	r.Reason = field.NewString(table, "reason")
	r.Result = field.NewString(table, "result")
	r.RequestTime = field.NewString(table, "request_time")
	r.EndTime = field.NewString(table, "end_time")

	r.fillFieldMap()

	return r
}

func (r *repairRequest) WithContext(ctx context.Context) IRepairRequestDo {
	return r.repairRequestDo.WithContext(ctx)
}

func (r repairRequest) TableName() string { return r.repairRequestDo.TableName() }

func (r repairRequest) Alias() string { return r.repairRequestDo.Alias() }

func (r repairRequest) Columns(cols ...field.Expr) gen.Columns {
	return r.repairRequestDo.Columns(cols...)
}

func (r *repairRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *repairRequest) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 10)
	r.fieldMap["repair_id"] = r.RepairID
	r.fieldMap["station_id"] = r.StationID
	r.fieldMap["pile_id"] = r.PileID
	r.fieldMap["repairman_id"] = r.RepairmanID
	r.fieldMap["description"] = r.Description
	r.fieldMap["status"] = r.Status
	r.fieldMap["reason"] = r.Reason
	r.fieldMap["result"] = r.Result
	r.fieldMap["request_time"] = r.RequestTime
	r.fieldMap["end_time"] = r.EndTime
}

func (r repairRequest) clone(db *gorm.DB) repairRequest {
	r.repairRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r repairRequest) replaceDB(db *gorm.DB) repairRequest {
	r.repairRequestDo.ReplaceDB(db)
	return r
}

type repairRequestDo struct{ gen.DO }

type IRepairRequestDo interface {
	gen.SubQuery
	Debug() IRepairRequestDo
	WithContext(ctx context.Context) IRepairRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRepairRequestDo
	WriteDB() IRepairRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRepairRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRepairRequestDo
	Not(conds ...gen.Condition) IRepairRequestDo
	Or(conds ...gen.Condition) IRepairRequestDo
	Select(conds ...field.Expr) IRepairRequestDo
	Where(conds ...gen.Condition) IRepairRequestDo
	Order(conds ...field.Expr) IRepairRequestDo
	Distinct(cols ...field.Expr) IRepairRequestDo
	Omit(cols ...field.Expr) IRepairRequestDo
	Join(table schema.Tabler, on ...field.Expr) IRepairRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRepairRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRepairRequestDo
	Group(cols ...field.Expr) IRepairRequestDo
	Having(conds ...gen.Condition) IRepairRequestDo
	Limit(limit int) IRepairRequestDo
	Offset(offset int) IRepairRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRepairRequestDo
	Unscoped() IRepairRequestDo
	Create(values ...*model.RepairRequest) error
	CreateInBatches(values []*model.RepairRequest, batchSize int) error
	Save(values ...*model.RepairRequest) error
	First() (*model.RepairRequest, error)
	Take() (*model.RepairRequest, error)
	Last() (*model.RepairRequest, error)
	Find() ([]*model.RepairRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RepairRequest, err error)
	FindInBatches(result *[]*model.RepairRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RepairRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRepairRequestDo
	Assign(attrs ...field.AssignExpr) IRepairRequestDo
	Joins(fields ...field.RelationField) IRepairRequestDo
	Preload(fields ...field.RelationField) IRepairRequestDo
	FirstOrInit() (*model.RepairRequest, error)
	FirstOrCreate() (*model.RepairRequest, error)
	FindByPage(offset int, limit int) (result []*model.RepairRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRepairRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r repairRequestDo) Debug() IRepairRequestDo {
	return r.withDO(r.DO.Debug())
}

func (r repairRequestDo) WithContext(ctx context.Context) IRepairRequestDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r repairRequestDo) ReadDB() IRepairRequestDo {
	return r.Clauses(dbresolver.Read)
}

func (r repairRequestDo) WriteDB() IRepairRequestDo {
	return r.Clauses(dbresolver.Write)
}

func (r repairRequestDo) Session(config *gorm.Session) IRepairRequestDo {
	return r.withDO(r.DO.Session(config))
}

func (r repairRequestDo) Clauses(conds ...clause.Expression) IRepairRequestDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r repairRequestDo) Returning(value interface{}, columns ...string) IRepairRequestDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r repairRequestDo) Not(conds ...gen.Condition) IRepairRequestDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r repairRequestDo) Or(conds ...gen.Condition) IRepairRequestDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r repairRequestDo) Select(conds ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r repairRequestDo) Where(conds ...gen.Condition) IRepairRequestDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r repairRequestDo) Order(conds ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r repairRequestDo) Distinct(cols ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r repairRequestDo) Omit(cols ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r repairRequestDo) Join(table schema.Tabler, on ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r repairRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r repairRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r repairRequestDo) Group(cols ...field.Expr) IRepairRequestDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r repairRequestDo) Having(conds ...gen.Condition) IRepairRequestDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r repairRequestDo) Limit(limit int) IRepairRequestDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r repairRequestDo) Offset(offset int) IRepairRequestDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r repairRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRepairRequestDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r repairRequestDo) Unscoped() IRepairRequestDo {
	return r.withDO(r.DO.Unscoped())
}

func (r repairRequestDo) Create(values ...*model.RepairRequest) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r repairRequestDo) CreateInBatches(values []*model.RepairRequest, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r repairRequestDo) Save(values ...*model.RepairRequest) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r repairRequestDo) First() (*model.RepairRequest, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepairRequest), nil
	}
}

func (r repairRequestDo) Take() (*model.RepairRequest, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepairRequest), nil
	}
}

func (r repairRequestDo) Last() (*model.RepairRequest, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepairRequest), nil
	}
}

func (r repairRequestDo) Find() ([]*model.RepairRequest, error) {
	result, err := r.DO.Find()
	return result.([]*model.RepairRequest), err
}

func (r repairRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RepairRequest, err error) {
	buf := make([]*model.RepairRequest, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r repairRequestDo) FindInBatches(result *[]*model.RepairRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r repairRequestDo) Attrs(attrs ...field.AssignExpr) IRepairRequestDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r repairRequestDo) Assign(attrs ...field.AssignExpr) IRepairRequestDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r repairRequestDo) Joins(fields ...field.RelationField) IRepairRequestDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r repairRequestDo) Preload(fields ...field.RelationField) IRepairRequestDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r repairRequestDo) FirstOrInit() (*model.RepairRequest, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepairRequest), nil
	}
}

func (r repairRequestDo) FirstOrCreate() (*model.RepairRequest, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepairRequest), nil
	}
}

func (r repairRequestDo) FindByPage(offset int, limit int) (result []*model.RepairRequest, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r repairRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r repairRequestDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r repairRequestDo) Delete(models ...*model.RepairRequest) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *repairRequestDo) withDO(do gen.Dao) *repairRequestDo {
	r.DO = *do.(*gen.DO)
	return r
}
