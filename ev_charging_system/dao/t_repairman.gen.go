// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ev_charging_system/model"
)

func newRepairman(db *gorm.DB, opts ...gen.DOOption) repairman {
	_repairman := repairman{}

	_repairman.repairmanDo.UseDB(db, opts...)
	_repairman.repairmanDo.UseModel(&model.Repairman{})

	tableName := _repairman.repairmanDo.TableName()
	_repairman.ALL = field.NewAsterisk(tableName)
	_repairman.RepairmanID = field.NewString(tableName, "repairman_id")
	_repairman.UserName = field.NewString(tableName, "user_name")
	_repairman.Password = field.NewString(tableName, "password")
	_repairman.Name = field.NewString(tableName, "name")
	_repairman.ContactInfo = field.NewString(tableName, "contact_info")
	_repairman.Status = field.NewInt8(tableName, "status")
	_repairman.Description = field.NewString(tableName, "description")
	_repairman.UserType = field.NewInt8(tableName, "user_type")
	_repairman.RegistTime = field.NewTime(tableName, "regist_time")

	_repairman.fillFieldMap()

	return _repairman
}

type repairman struct {
	repairmanDo repairmanDo

	ALL         field.Asterisk
	RepairmanID field.String
	UserName    field.String
	Password    field.String
	Name        field.String
	ContactInfo field.String
	Status      field.Int8
	Description field.String
	UserType    field.Int8
	RegistTime  field.Time

	fieldMap map[string]field.Expr
}

func (r repairman) Table(newTableName string) *repairman {
	r.repairmanDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r repairman) As(alias string) *repairman {
	r.repairmanDo.DO = *(r.repairmanDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *repairman) updateTableName(table string) *repairman {
	r.ALL = field.NewAsterisk(table)
	r.RepairmanID = field.NewString(table, "repairman_id")
	r.UserName = field.NewString(table, "user_name")
	r.Password = field.NewString(table, "password")
	r.Name = field.NewString(table, "name")
	r.ContactInfo = field.NewString(table, "contact_info")
	r.Status = field.NewInt8(table, "status")
	r.Description = field.NewString(table, "description")
	r.UserType = field.NewInt8(table, "user_type")
	r.RegistTime = field.NewTime(table, "regist_time")

	r.fillFieldMap()

	return r
}

func (r *repairman) WithContext(ctx context.Context) IRepairmanDo {
	return r.repairmanDo.WithContext(ctx)
}

func (r repairman) TableName() string { return r.repairmanDo.TableName() }

func (r repairman) Alias() string { return r.repairmanDo.Alias() }

func (r repairman) Columns(cols ...field.Expr) gen.Columns { return r.repairmanDo.Columns(cols...) }

func (r *repairman) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *repairman) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["repairman_id"] = r.RepairmanID
	r.fieldMap["user_name"] = r.UserName
	r.fieldMap["password"] = r.Password
	r.fieldMap["name"] = r.Name
	r.fieldMap["contact_info"] = r.ContactInfo
	r.fieldMap["status"] = r.Status
	r.fieldMap["description"] = r.Description
	r.fieldMap["user_type"] = r.UserType
	r.fieldMap["regist_time"] = r.RegistTime
}

func (r repairman) clone(db *gorm.DB) repairman {
	r.repairmanDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r repairman) replaceDB(db *gorm.DB) repairman {
	r.repairmanDo.ReplaceDB(db)
	return r
}

type repairmanDo struct{ gen.DO }

type IRepairmanDo interface {
	gen.SubQuery
	Debug() IRepairmanDo
	WithContext(ctx context.Context) IRepairmanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRepairmanDo
	WriteDB() IRepairmanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRepairmanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRepairmanDo
	Not(conds ...gen.Condition) IRepairmanDo
	Or(conds ...gen.Condition) IRepairmanDo
	Select(conds ...field.Expr) IRepairmanDo
	Where(conds ...gen.Condition) IRepairmanDo
	Order(conds ...field.Expr) IRepairmanDo
	Distinct(cols ...field.Expr) IRepairmanDo
	Omit(cols ...field.Expr) IRepairmanDo
	Join(table schema.Tabler, on ...field.Expr) IRepairmanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRepairmanDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRepairmanDo
	Group(cols ...field.Expr) IRepairmanDo
	Having(conds ...gen.Condition) IRepairmanDo
	Limit(limit int) IRepairmanDo
	Offset(offset int) IRepairmanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRepairmanDo
	Unscoped() IRepairmanDo
	Create(values ...*model.Repairman) error
	CreateInBatches(values []*model.Repairman, batchSize int) error
	Save(values ...*model.Repairman) error
	First() (*model.Repairman, error)
	Take() (*model.Repairman, error)
	Last() (*model.Repairman, error)
	Find() ([]*model.Repairman, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Repairman, err error)
	FindInBatches(result *[]*model.Repairman, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Repairman) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRepairmanDo
	Assign(attrs ...field.AssignExpr) IRepairmanDo
	Joins(fields ...field.RelationField) IRepairmanDo
	Preload(fields ...field.RelationField) IRepairmanDo
	FirstOrInit() (*model.Repairman, error)
	FirstOrCreate() (*model.Repairman, error)
	FindByPage(offset int, limit int) (result []*model.Repairman, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRepairmanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r repairmanDo) Debug() IRepairmanDo {
	return r.withDO(r.DO.Debug())
}

func (r repairmanDo) WithContext(ctx context.Context) IRepairmanDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r repairmanDo) ReadDB() IRepairmanDo {
	return r.Clauses(dbresolver.Read)
}

func (r repairmanDo) WriteDB() IRepairmanDo {
	return r.Clauses(dbresolver.Write)
}

func (r repairmanDo) Session(config *gorm.Session) IRepairmanDo {
	return r.withDO(r.DO.Session(config))
}

func (r repairmanDo) Clauses(conds ...clause.Expression) IRepairmanDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r repairmanDo) Returning(value interface{}, columns ...string) IRepairmanDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r repairmanDo) Not(conds ...gen.Condition) IRepairmanDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r repairmanDo) Or(conds ...gen.Condition) IRepairmanDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r repairmanDo) Select(conds ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r repairmanDo) Where(conds ...gen.Condition) IRepairmanDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r repairmanDo) Order(conds ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r repairmanDo) Distinct(cols ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r repairmanDo) Omit(cols ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r repairmanDo) Join(table schema.Tabler, on ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r repairmanDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r repairmanDo) RightJoin(table schema.Tabler, on ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r repairmanDo) Group(cols ...field.Expr) IRepairmanDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r repairmanDo) Having(conds ...gen.Condition) IRepairmanDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r repairmanDo) Limit(limit int) IRepairmanDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r repairmanDo) Offset(offset int) IRepairmanDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r repairmanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRepairmanDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r repairmanDo) Unscoped() IRepairmanDo {
	return r.withDO(r.DO.Unscoped())
}

func (r repairmanDo) Create(values ...*model.Repairman) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r repairmanDo) CreateInBatches(values []*model.Repairman, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r repairmanDo) Save(values ...*model.Repairman) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r repairmanDo) First() (*model.Repairman, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Repairman), nil
	}
}

func (r repairmanDo) Take() (*model.Repairman, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Repairman), nil
	}
}

func (r repairmanDo) Last() (*model.Repairman, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Repairman), nil
	}
}

func (r repairmanDo) Find() ([]*model.Repairman, error) {
	result, err := r.DO.Find()
	return result.([]*model.Repairman), err
}

func (r repairmanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Repairman, err error) {
	buf := make([]*model.Repairman, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r repairmanDo) FindInBatches(result *[]*model.Repairman, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r repairmanDo) Attrs(attrs ...field.AssignExpr) IRepairmanDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r repairmanDo) Assign(attrs ...field.AssignExpr) IRepairmanDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r repairmanDo) Joins(fields ...field.RelationField) IRepairmanDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r repairmanDo) Preload(fields ...field.RelationField) IRepairmanDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r repairmanDo) FirstOrInit() (*model.Repairman, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Repairman), nil
	}
}

func (r repairmanDo) FirstOrCreate() (*model.Repairman, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Repairman), nil
	}
}

func (r repairmanDo) FindByPage(offset int, limit int) (result []*model.Repairman, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r repairmanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r repairmanDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r repairmanDo) Delete(models ...*model.Repairman) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *repairmanDo) withDO(do gen.Dao) *repairmanDo {
	r.DO = *do.(*gen.DO)
	return r
}
